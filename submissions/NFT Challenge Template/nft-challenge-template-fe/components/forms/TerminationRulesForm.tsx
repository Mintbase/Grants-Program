/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/6CInJkpB3S5
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { PopoverTrigger, PopoverContent, Popover } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Dispatch, SetStateAction } from "react";
import { Progress } from "../ChallengeCreator";

export function TerminationRulesForm({
  setProgress,
  creatorCanEndChallenge,
  setCreatorCanEndChallenge,
  terminationDate,
  setTerminationDate,
}: {
  setProgress: Dispatch<SetStateAction<Progress>>;
  creatorCanEndChallenge: boolean;
  setCreatorCanEndChallenge: Dispatch<SetStateAction<boolean>>;
  terminationDate: Date | undefined;
  setTerminationDate: Dispatch<SetStateAction<Date | undefined>>;
}) {
  return (
    <div className="mx-auto max-w-md space-y-6">
      <div className="space-y-4">
        <div className="space-y-2">
          <h2 className="text-xl font-semibold">Termination Details</h2>
          <p className="text-gray-500 dark:text-gray-400">Fill out the details for the termination of this employee.</p>
        </div>
        <div className="flex items-center justify-between">
          <label className="font-medium" htmlFor="create-can-end-challenge">
            Termination date exists
          </label>
          <Checkbox
            checked={terminationDate != null}
            onCheckedChange={() => {
              if (terminationDate == null) {
                const tomorrow = new Date();
                // add a day
                tomorrow.setDate(tomorrow.getDate() + 1);
                setTerminationDate(tomorrow);
              } else {
                setTerminationDate(undefined);
              }
            }}
            id="create-can-end-challenge"
          />
        </div>
        <div className={`grid grid-cols-2 items-center gap-4 ${terminationDate == null ? "hidden" : ""}`}>
          <label className="text-left font-medium" htmlFor="termination-date">
            Termination Date
          </label>
          <div className="w-full">
            <Popover>
              <PopoverTrigger asChild>
                <button
                  className="w-full justify-start rounded-md border  border-gray-300 bg-white px-4 py-2 text-left font-normal text-gray-700 shadow-sm transition-colors hover:bg-gray-50 focus:border-gray-900 focus:outline-none focus:ring-1 focus:ring-gray-900 dark:bg-gray-950 dark:text-gray-300 dark:hover:bg-gray-800 dark:border-gray-800 dark:focus:border-gray-50 dark:focus:ring-gray-50"
                  type="button"
                >
                  <div className="flex items-center">
                    <CalendarDaysIcon className="mr-1 h-4 w-4 -translate-x-1" />
                    <span>{terminationDate?.toDateString() || "Select Date"}</span>
                  </div>
                </button>
              </PopoverTrigger>
              <PopoverContent align="start" className="w-auto p-0">
                <Calendar
                  selected={terminationDate}
                  onDayClick={(e) => {
                    setTerminationDate(e);
                  }}
                  initialFocus
                  mode="single"
                />
              </PopoverContent>
            </Popover>
          </div>
        </div>
        <div className="flex items-center justify-between">
          <label className="font-medium" htmlFor="create-can-end-challenge">
            Creator can end challenge
          </label>
          <Checkbox
            checked={creatorCanEndChallenge}
            onCheckedChange={() => {
              setCreatorCanEndChallenge(!creatorCanEndChallenge);
            }}
            id="create-can-end-challenge"
          />
        </div>
      </div>
      <div className="mt-6 flex justify-between">
        <Button onClick={() => setProgress(Progress.SetChallenges)} variant="outline">
          Previous
        </Button>
        <Button className="ml-4" onClick={() => setProgress(Progress.CreateContract)}>
          Create Challenge
        </Button>
      </div>
    </div>
  );
}

interface CalendarDaysIconProps {
  width?: string;
  height?: string;
  viewBox?: string;
  fill?: string;
  stroke?: string;
  strokeWidth?: string;
  className: string;
}

function CalendarDaysIcon(props: CalendarDaysIconProps) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width={props.width || "24"}
      height={props.height || "24"}
      viewBox={props.viewBox || "0 0 24 24"}
      fill={props.fill || "none"}
      stroke={props.stroke || "currentColor"}
      strokeWidth={props.strokeWidth || "2"}
      strokeLinecap={"round"}
      strokeLinejoin={"round"}
    >
      <path d="M8 2v4" />
      <path d="M16 2v4" />
      <rect width="18" height="18" x="3" y="4" rx="2" />
      <path d="M3 10h18" />
      <path d="M8 14h.01" />
      <path d="M12 14h.01" />
      <path d="M16 14h.01" />
      <path d="M8 18h.01" />
      <path d="M12 18h.01" />
      <path d="M16 18h.01" />
    </svg>
  );
}
